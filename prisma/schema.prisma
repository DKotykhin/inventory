generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleTypes {
  USER
  ADMIN
  SUBADMIN
  VISITOR
}

enum CurrencyTypes {
  USD
  UAH
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  email         String         @unique
  userName      String?        @map("user_name")
  passwordHash  String?        @map("password_hash")
  avatar        String?
  role          RoleTypes      @default(value: USER)
  resetPassword ResetPassword?
  emailConfirm  EmailConfirm?
}

model ResetPassword {
  id        String    @id @default(cuid())
  token     String?   @unique
  expiredAt DateTime? @map("expired_at")
  changedAt DateTime? @map("changed_at")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailConfirm {
  id        String    @id @default(cuid())
  token     String?   @unique
  expiredAt DateTime? @map("expired_at")
  verified  Boolean   @default(value: false)

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  title       String
  description String?
  date        DateTime

  items Product[]
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  title         String
  serialNumber  String?    @map("serial_number")
  isNew         Boolean    @default(value: true) @map("is_new")
  photo         String?
  type          String
  specification String?
  order         Int        @default(autoincrement())
  date          DateTime
  guarantee     Guarantee?
  price         Price[]

  orders  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @map("order_id")
}

model Guarantee {
  id Int @id @default(autoincrement())

  start DateTime?
  end   DateTime?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique @map("product_id")
}

model Price {
  value     Int
  symbol    CurrencyTypes
  isDefault Boolean       @default(value: false) @map("is_default")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  @@id([productId, symbol])
}
